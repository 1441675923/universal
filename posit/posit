// posit standard header
//
// Copyright (C) 2017-2019 Stillwater Supercomputing, Inc.
//
// This file is part of the universal numbers project, which is released under an MIT Open Source license.
#ifndef _POSIT_STANDARD_HEADER_
#define _POSIT_STANDARD_HEADER_

////////////////////////////////////////////////////////////////////////////////////////
///  BEHAVIORAL COMPILATION SWITCHES

////////////////////////////////////////////////////////////////////////////////////////
// enable/disable special posit format I/O
#if !defined(POSIT_ROUNDING_ERROR_FREE_IO_FORMAT)
// default is to print (long double) values
#define POSIT_ROUNDING_ERROR_FREE_IO_FORMAT 0
#endif

////////////////////////////////////////////////////////////////////////////////////////
// enable/disable the ability to use literals in binary logic and arithmetic operators
#if !defined(POSIT_ENABLE_LITERALS)
// default is to enable them
#define POSIT_ENABLE_LITERALS 1
#endif

////////////////////////////////////////////////////////////////////////////////////////
// enable throwing specific exceptions for posit arithmetic errors
// left to application to enable
#if !defined(POSIT_THROW_ARITHMETIC_EXCEPTION)
// default is to use NaR as a signalling error
#define POSIT_THROW_ARITHMETIC_EXCEPTION 0
#endif

////////////////////////////////////////////////////////////////////////////////////////
/// INCLUDE FILES that make up the library
#include "posit.hpp"
#include "numeric_limits.hpp"
//#include "posit_decoded.hpp"

// enable fast implementations of the standard posits
// POSIT_FAST_SPECIALIZATION when set will turn on all fast implementations
// Each implementation defines a macros POSIT_FAST_POSIT_`nbits`_`es,
// and includes the fast implementation if set to 1.
// For example, POSIT_FAST_POSIT_8_0, when set to 1, will enable the fast implementation of posit<8,0>.
// The individual POSIT_FAST_### macros enable fine grain control over which configurations
// use fast code.
#ifdef POSIT_FAST_SPECIALIZATION
#define POSIT_FAST_POSIT_2_0  1
#define POSIT_FAST_POSIT_3_0  1
#define POSIT_FAST_POSIT_3_1  1
#define POSIT_FAST_POSIT_4_0  1
#define POSIT_FAST_POSIT_8_0  1
#define POSIT_FAST_POSIT_16_1 0
#define POSIT_FAST_POSIT_32_2 1
#define POSIT_FAST_POSIT_64_3 0
#endif

// fast specializations for special posit configurations
#include "specialized/posit_2_0.hpp"
#include "specialized/posit_3_0.hpp"
#include "specialized/posit_3_1.hpp"
#include "specialized/posit_4_0.hpp"
#include "specialized/posit_8_0.hpp"
#include "specialized/posit_16_1.hpp"
#include "specialized/posit_32_2.hpp"
#include "specialized/posit_64_3.hpp"

#include "posit_manipulators.hpp"
#include "posit_functions.hpp"
#include "quire.hpp"

// math functions
#include "math_truncate.hpp"
#include "math_classify.hpp"
#include "math_complex.hpp"
#include "math_sqrt.hpp"
#include "math_pow.hpp"
#include "math_logarithm.hpp"
#include "math_exponents.hpp"
#include "math_trigonometric.hpp"
#include "math_hyperbolic.hpp"
#include "math_error_gamma.hpp"
#include "math_minmax.hpp"
#include "math_hypot.hpp"
#include "math_frac.hpp"
#include "math_next.hpp"

#endif
